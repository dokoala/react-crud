리액트의 컴퍼넌트 기능!
1. 가독성
2. 재사용성
실시간으로 변경된 내용이 업데이트 됨 = 유지보수가 쉬움

npm 설치하는 프로그램
npx는 create-react-app는 딱 한번만 설치하고 지우는 애. 계속 최신상태를 유지시켜줌.

npm install create-react-app이후..

npm start 에서 화면은 public - index.html 이 실행된 내용이 나옴.
src/index.js에서 app.js를 소환하는 느낌임

npm start build를 하면 build 폴더가 생기면서
이미 가지고 있는 데이터들이 싹 저장이 되는 공간이다.

npm serve -s build 이거 써라 훨씬 드는 용량이 줄어든다.

component
기본적으로 html에 많이 반복적으로 쓰던것을 줄여주고
재사용성이 쌉사기다. 처음에 알려줬던 것 그대로네.

props?
{this.props.sub} 이런식으로 사용해서 값을 가져올 수 있다.
jsx

props
state는 props에 구현에 필요한 데이터들을 말함

render 되ㄱ전에 constructor 가 존재하면 constructor 먼저실행

왜 setState를 사용해야 하는가?
react 입장에서는 단순하게 = 로 뭘바꿔야하는지 모른다.

e에서 타겟,데이타 셋에서 찾거나
function과 bind에서 따로 변수를 추가해서 얻을 수 있다.

props 랑 state 구별해라

redux 는 데이터를 모아놔서 한 번에 뿌린다는 느낌임

push는 원본을 바꾸고 concat은 원본을 바꾸지 않고 새로운 배열을 return.
이게 대체 왜필요함? 원본은 건드는게 좋지않음

shouldComponentUpdate 기본적으로 return true;
여기서 아마 쓸데 없이 사용되는 컴포넌트를 막기위해 사용되는것 같다.
이걸 사용하는데에 있어서 push를 쓴다면
기존에 쓰는 것과 똑같은 것이 그대로 적용이 되기 때문에 true false 적용이 되지 않는다.
그래서 concat 써서 따로 배열 만드는것이 좋음 ㅇㅇ

그래도 push를 쓰고 싶다?
var a = [1,2];
var b = Array.from(a);
a !=b 이기 때문에 이거 쓰면된다.

Object.assign({},a); 객체는 이런식으로 만들어주면된다.

Array.from(this.state.contents) = 복제